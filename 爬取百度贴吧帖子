#！/usr/bin/env python
#-*-coding:utf:8-*-

import urllib2
import re

#调用网页标签处理类
import Tool

#定义百度贴吧类
class BDTB:
    #初始化，传入基本的URL，是否只看楼主参数
    def __init(self, baseURL, seeLZ, floorTag):
        #获取初始网址
        self.baseURL = baseURL
        #获取是否只看楼主
        self.seeLZ = "?see_lz=" + str(seeLZ)
        #获取HTML标签剔除工具类
        self.tool = Tool()
        #定义全局file变量，文件写入操作对象
        self.file = None
        #默认楼层为1
        self.floor = 1
        #默认标题，如果没有成功获取到标题则使用默认标题
        self.defaultTitle = u"百度贴吧"
        #是否写入楼层分隔符
        self.floorTag = floorTag
    
    #传入页码，获取相应页码对应代码
    def getPage(self, pageNum):
        try:
            #构建url，基本网址+是否查看楼主+页码
            url = self.baseURL + self.seeLZ + "&pn=" + str(pageNum)
            #urllib2.Request发送页面请求
            request = urllib2.Request(url)
            #urllib2.urlopen获取页码
            response = urllib2.urlopen(request)
            #返回'utf-8'编码后的页码
            return response.read().decode('utf-8')
        #如果获取页码过程中出现异常    
        except urllib2.URLError, e:
            #输出失败原因
            if hasattr(e, "reason"):
                print (u"连接贴吧失败，失败原因：", e.reason)
                return None
     
    #获取帖子的标题
    def getTitle(self, page):
        #设置正则表达式规则，获取titl文件
        pattern = re.compile('<h1 class="core_title_txt.*?>(.*?)</h1>', re.S)
        #在返回的页面代码中删选标题
        result = re.search(pattern, page)
        #如过成功获取标题信息，返回
        if result:
            reutrn result.sroup(1).strip()
        else:
            return None
    
    #设置获取贴子共有多少页函数
    def getPageNum(self, page):
        #设置删选格式
        pattern = re.compile('<li class="l_reply_num.*?</span>.*?<span.*?>(.*?)</span>'.re.S)
        #获取帖子页数
        result = re.search(pattern, page)
        if result:
            return result.group(1).strip()
        else:
            return None
    
    #定义获取每一层楼的内容
    def getContent(self, page):
        #设置获取内容正则表达式
        pattern = re.compile('<div id=post_content_.*?>(.*?)</div>', re.S)
        #筛选出所有符合条件项
        items = re.findall(pattern, page)
        #定义保存楼层内容列表
        contents = []
        #对内容处理，同时在内容前后加入换行符
        for item in items:
        content = "\n" + self.tool.rapalce(item) + "\n"
        #将处理后的内容以'utf-8'编码后保存在contents列表中
        contents.append(content.enconde("utf-8"))
        #返回保存处理后内容的列表
        return contents
    
    #定义设置文件标题函数
    def setFileTitle(self, title):
        #如果标题不是None，即成功获取到标题
        if title is not None:
            #设置文件为写入模式
            self.file = open(title + ".txt", "w+")
        #如果没有获取到标题，使用默认标题
        else:
            self.file = open(self.defaultTitle + ".txt" + "w+")
             
    
    #想文件写入每一楼层的数据
    def writeData(self, contents):
        for item in contents:
            if self.floorTag == "1":
                #设置楼层之间的分隔符
                floorLine = "\n" + str(self.floor) + u"-----------------"
                self.file.write(floorLine)
            #分别写入不同楼层数据
            self.file.write(item)
            self.floor += 1
    
    #定义开始函数
    def start(self):
        #获取输入页码对应代码
        indexPage = self.getPage(1)
        #获取帖子所含页码数
        pageNum = self.getPageNum(indexPage)
        #获取帖子标题
        title = self.getTitle(indexPage)
        #设置标题名称
        self.setFileTitle(title)
        #如果未获取到帖子代码，打印提醒
        if pageNum == None:
            print (u"URL以失效，请重试")
            return
        #对获取代码处理
        try:
           #输出帖子含有的页码数
            print ("该帖子共有" + str(pageNum) + "页"
            for i in range(1, int(pageNum)+1):
                print ("正在写入第" + str(i) + "页数据")
                #获取页面代码
                page = self.getPage(i)
                #获取对应代码所包含的每一层路的内容
                contents = self.getContent(page)
                #将每一层楼的内容写入文件
                self.writeData(contents)
        except IOError, e:
            print ("写入异常, 原因" + e.massage)
        finally:
            print ("写入任务完成！")
             
print (u"请输入帖子代号：")
baseURL = "http://tieba.baidu.com/p" + str(input(u"http://tieba.baidu.com/p/"))
seeLZ = input("是否只获取楼主信息，是输入1，否输入0\n")
floorTag = input("是否写入楼层数据，是输入1，否输入0\n")
bdtb = BDTB(baseURL, seeLZ, floorTag)
bdtb.start()
         
                
            

